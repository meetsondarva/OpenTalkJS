I'll provide a sample API documentation for a fictional e-commerce application. Please note that this is just a sample and you should adjust it according to your specific needs.

**API Name:** Shopping Cart API

**Description:** This API provides a RESTful interface for managing shopping carts.

**Endpoint Path:**

* `GET /carts`: Retrieve all shopping carts
* `POST /carts`: Create a new shopping cart
* `PUT /carts/{cartId}`: Update an existing shopping cart
* `DELETE /carts/{cartId}`: Delete a shopping cart

**Request Body:**

* `body`: JSON object containing the following properties:
 + `id` (integer, unique identifier for the shopping cart)
 + `customerEmail` (string, email address of the customer associated with the cart)
 + `totalItems` (integer, total number of items in the cart)
 + `items`: JSON array of objects representing individual items in the cart
 + `subtotal` (float, subtotal price of all items in the cart)

**Response:**

* `200 OK`: The shopping cart has been successfully created, updated or deleted.
* `400 Bad Request`: Invalid request body or missing required fields.
* `404 Not Found`: The requested shopping cart does not exist.

**Example Response:**

```json
{
  "id": 1,
  "customerEmail": "john.doe@example.com",
  "totalItems": 2,
  "items": [
    {
      "id": 1,
      "name": "Product A",
      "price": 10.99
    },
    {
      "id": 2,
      "name": "Product B",
      "price": 5.99
    }
  ],
  "subtotal": 15.98
}
```

**Example Request:**

```bash
POST /carts HTTP/1.1
Content-Type: application/json

{
  "id": 1,
  "customerEmail": "john.doe@example.com",
  "totalItems": 2,
  "items": [
    {
      "id": 1,
      "name": "Product A",
      "price": 10.99
    },
    {
      "id": 2,
      "name": "Product B",
      "price": 5.99
    }
  ],
  "subtotal": 15.98
}
```

**Security:**

* Authentication: JWT (JSON Web Token) is used for secure authentication and authorization.
* Authorization: Roles-based access control (RBAC) is implemented to restrict access to specific resources.

**Notes:**

* This API uses a simple in-memory storage mechanism, which means that all data will be lost when the server restarts. For production use cases, consider using a more robust database solution such as MongoDB or PostgreSQL.
* The `subtotal` field represents the total cost of all items in the cart before taxes and shipping fees are applied. In a real-world scenario, you may want to calculate this value based on a specific pricing strategy.

**Error Handling:**

* `409 Conflict`: The requested resource has already been created or updated by another user.
* `500 Internal Server Error`: A general error that occurred while processing the request.

I hope this sample API documentation helps! Let me know if you have any questions or need further assistance.